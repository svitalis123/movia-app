name: Code Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # Fetch full history for better analysis
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint -- --format=json --output-file=eslint-report.json
        continue-on-error: true
        
      - name: Run Prettier check
        run: npm run format:check
        
      - name: Run TypeScript check
        run: npm run type-check
        
      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-report
          path: eslint-report.json
          retention-days: 7
          
      - name: Annotate code with linting results
        uses: ataylorme/eslint-annotate-action@v3
        if: always()
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          report-json: "eslint-report.json"
          
      - name: Comment PR with results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const fs = require('fs');
            
            // Read ESLint report if it exists
            let eslintResults = '';
            try {
              const eslintReport = JSON.parse(fs.readFileSync('eslint-report.json', 'utf8'));
              const totalErrors = eslintReport.reduce((sum, file) => sum + file.errorCount, 0);
              const totalWarnings = eslintReport.reduce((sum, file) => sum + file.warningCount, 0);
              
              eslintResults = `
              ## 📊 Code Quality Report
              
              - **ESLint Errors**: ${totalErrors}
              - **ESLint Warnings**: ${totalWarnings}
              - **TypeScript**: ✅ Type check passed
              - **Prettier**: ✅ Formatting check passed
              
              ${totalErrors > 0 ? '❌ Please fix the ESLint errors before merging.' : '✅ All code quality checks passed!'}
              `;
            } catch (error) {
              eslintResults = '## 📊 Code Quality Report\n\n❌ Could not generate report due to linting errors.';
            }
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('📊 Code Quality Report')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: eslintResults
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: eslintResults
              });
            }